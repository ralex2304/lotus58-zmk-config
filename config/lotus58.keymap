/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        game_layer_disable_combo {
            bindings = <&to 0>;
            key-positions = <55 56>;
            layers = <7>;
        };
    };

    behaviors {
        sticky_tap: sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
            hold-while-undecided;
            hold-while-undecided-linger;
        };

        lang_switch: lang_switch {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG_SWITCH";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LG(SPACE)>;

            tapping-term-ms = <500>;
        };

        plus_minus_mod_morph: plus_minus_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_MINUS_MOD_MORPH";
            bindings = <&kp PLUS>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mul_div_mod_morph: mul_div_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "MUL_DIV_MOD_MORPH";
            bindings = <&kp ASTERISK>, <&kp SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        motion_mod_brightness: motion_mod_brightness {
            compatible = "zmk,behavior-mod-morph";
            label = "MOTION_MOD_BRIGHTNESS";
            bindings = <&kp C_BRIGHTNESS_INC>, <&kp C_BRIGHTNESS_DEC>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        leader_key_macro: leader_key_macro {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "LEADER_KEY_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            bindings = <
&kp ESC       &none  &none  &kp ESC           &none                              &none                                           &none  &none      &kp MINUS  &none    &none     &none
&kp GRAVE     &kp Q  &kp W  &kp E             &kp R                              &kp T                                           &kp Y  &kp U      &kp I      &kp O    &kp P     &kp EQUAL
&kp TAB       &kp A  &kp S  &kp D             &kp F                              &kp G      &none             &none              &kp H  &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&lang_switch  &kp Z  &kp X  &kp C             &kp V                              &kp B      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSLASH
                            &kp LEFT_CONTROL  &sticky_tap LEFT_SHIFT LEFT_SHIFT  &lt 1 DEL  &kp BACKSPACE     &kp SPACE          &mo 2  &kp ENTER  &kp LALT
            >;

            label = "Main";
        };

        num_layer {
            bindings = <
&trans                 &trans      &trans      &trans      &trans      &trans                         &trans      &trans      &trans      &trans      &trans      &trans
&plus_minus_mod_morph  &kp N6      &kp N7      &kp N8      &kp N9      &kp N0                         &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11
&mul_div_mod_morph     &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &trans     &trans  &kp F1      &kp F2      &kp F3      &kp F4      &kp F5      &kp F12
&kp KP_DOT             &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &kp ENTER  &none   &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &none
                                               &trans      &trans      &trans      &trans     &trans  &trans      &trans      &trans
            >;

            label = "Num";
        };

        motion_layer {
            bindings = <
&trans  &trans         &trans         &trans         &trans         &trans                                                  &trans  &trans    &trans         &trans       &trans     &trans
&trans  &kp LS(LC(Z))  &kp LS(LC(X))  &kp LS(LC(C))  &kp LS(LC(V))  &none                                                   &none   &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &none
&trans  &none          &mo 5          &mo 4          &mo 3          &none                   &none              &none        &none   &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &none
&trans  &kp LC(Z)      &kp LC(X)      &kp LC(C)      &kp LC(V)      &motion_mod_brightness  &kp C_AL_LOCK      &kp C_SLEEP  &none   &kp H     &kp J          &kp K        &kp L      &none
                                      &trans         &trans         &lt 1 LC(DELETE)        &kp LC(BACKSPACE)  &trans       &trans  &trans    &trans
            >;

            label = "Motion";
        };

        cli_layer {
            label = "CLI";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans                                &trans                             &leader_key_macro LC(S) X      &trans                             &trans                              &trans
&trans  &none   &none   &none   &none   &none                   &leader_key_macro LC(S) LS(SQT)       &kp N0                             &kp LC(E)                      &kp LC(Y)                          &kp LS(DLLR)                        &leader_key_macro LC(S) LS(N5)
&trans  &none   &none   &none   &none   &none   &none   &none   &leader_key_macro LC(S) Z             &kp LC(H)                          &kp LC(J)                      &kp LC(K)                          &kp LC(L)                           &leader_key_macro G T
&trans  &none   &none   &none   &none   &none   &none   &none   &leader_key_macro LC(S) LEFT_BRACKET  &leader_key_macro LC(W) LS(COMMA)  &leader_key_macro LC(W) MINUS  &leader_key_macro LC(W) LS(EQUAL)  &leader_key_macro LC(W) LS(PERIOD)  &leader_key_macro G LS(T)
                        &trans  &trans  &trans  &trans  &trans  &trans                                &trans                             &trans
            >;
        };

        windows_layer {
            label = "Win";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans             &trans                  &kp LA(F4)                  &trans                       &trans                   &trans
&trans  &none   &none   &none   &none   &none                   &kp LG(PAGE_DOWN)  &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)          &kp LG(UP_ARROW)             &kp LG(RIGHT_ARROW)      &kp LG(PAGE_UP)
&trans  &none   &none   &none   &none   &none   &none   &none   &kp LA(TAB)        &kp LA(LG(LEFT_ARROW))  &kp LG(LS(LEFT_ARROW))      &kp LG(LS(RIGHT_ARROW))      &kp LA(LG(RIGHT_ARROW))  &kp LC(TAB)
&trans  &none   &none   &none   &none   &none   &none   &none   &kp LS(LA(TAB))    &kp LA(LC(LEFT_ARROW))  &kp LA(LC(LS(LEFT_ARROW)))  &kp LA(LC(LS(RIGHT_ARROW)))  &kp LA(LC(RIGHT_ARROW))  &kp LC(LS(TAB))
                        &trans  &trans  &trans  &trans  &trans  &trans             &trans                  &trans
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans           &trans        &trans            &trans            &trans        &trans
&trans  &none   &none   &none   &none   &none                   &kp LC(F5)       &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp F12
&trans  &none   &none   &none   &none   &none   &none   &none   &kp PRINTSCREEN  &kp C_VOL_DN  &kp K_MUTE        &kp K_MUTE        &kp C_VOL_UP  &kp LC(TAB)
&trans  &none   &none   &none   &none   &none   &none   &none   &kp LG(RETURN)   &kp LC(T)     &kp LC(LS(T))     &kp F5            &kp LC(W)     &kp LC(LS(TAB))
                        &trans  &trans  &trans  &trans  &trans  &trans           &trans        &trans
            >;
        };

        misc_layer {
            bindings = <
&to 0      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                &none            &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_PLUS   &none
&kp TAB    &out OUT_BLE  &out OUT_USB  &sys_reset    &bootloader   &kp SCROLLLOCK                              &kp KP_NUMLOCK   &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS   &kp KP_DOT
&kp CAPS   &none         &none         &none         &none         &kp SYSREQ       &none      &none           &kp KP_DIVIDE    &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_ENTER  &kp ENTER
&kp LSHFT  &none         &none         &none         &none         &kp PAUSE_BREAK  &to 7      &studio_unlock  &kp KP_MULTIPLY  &kp KP_N0  &kp KP_N0  &kp KP_DOT  &kp KP_ENTER  &kp RSHFT
                                       &kp LCTRL     &kp LGUI      &kp LALT         &kp SPACE  &kp SPACE       &kp RALT         &kp RGUI   &kp RCTRL
            >;

            label = "Misc";
        };

        game_layer {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3     &kp N4    &kp N5                          &kp N6    &kp N7    &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E      &kp R     &kp T                           &kp Y     &kp U     &kp I      &kp O    &kp P     &kp EQUAL
&kp CAPS   &kp A   &kp S   &kp D      &kp F     &kp G     &none      &none      &kp H     &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C      &kp V     &kp B     &kp LBKT   &kp RBKT   &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp BSLH
                           &kp LCTRL  &kp LGUI  &kp LALT  &kp SPACE  &kp SPACE  &kp RALT  &kp RGUI  &kp RCTRL
            >;

            label = "Game";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        misc_layer {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
